Style
background-color #2d2013;
font family Verdana

container max width possible will be 800px / set it center (margin)

@media(max-width: 800px){

}
@media(max-width: 700px){
  
}
@media(max-width: 500px){
  set the input width to 100%; (of its container)
}
_________________________________________________________________________
SCRIPT

// FUNCTION [SEARCH MEAL AND FETCH FROM API]
  →it will fetch the meals, we will loop through and output that into the dom
  →prevent default

  // Clear Single Meal element
  // Get search term (get the input)
  // Make sure if something is typed [CHECK FOR EMPTY]
      hint: use .trim() -> it will not get the spaces
      if empty -> show alert
      if not empty
        fetch (search meal by name)
          ..... 
          .....
          work with the data that is returned

            a. add the h2 Search results for 'input value that you get   above'
            b. if data is null
                  result heading => there are no searh results. [check]
                else
                  map through data and 
                  output a div.meal
                  .meal will contain a img, find the image source at the array data

                  [CHECK NOTES]

      REMINDER: MAP RETURNS US AN ARRAY OF THINGS
      IN THIS CASE WE WANT TO RETURN THE THINGS AS A STRING SO WE WILL use [[[[[[[  .join()  ]]]]]]]

  // Clear Search Text


// Event Listeners
We will add an submit event at the submit element, and it will call the searchMeal function
------------------------------------------------------------------------
Show Single Meal Page

//FUNCTION Fetch Meal By ID 
  it will fetch(`Lookup full meal details by id`)
    get meal from the data array that is returned
    meal = data. ... ..

    call addMealToDom(meal)

//FUNCTION Add Meal To DOM 
  initialize an array ingredients = []
  we have to create an array of strIngredient and strMeasure

  we will iterate from 1 to =20, because thats the max nr of ingredients
    if we have a meal with strIngredient
      we will push to ingredients meal[strIngredient 1, 2 .. n] - meal strmeasure[1,2 .. n]
    else
      break the for loop

  updateUI
    → singleMealEl.innerHTML = ` ` 

    for the <ul> 
        we will map through ingredients and for each ingredient , we will output a '<li>${ingredient}</li>
        [join]


// Event Listeners
We will add a click event at the mealsEl, 
  it will get mealInfo = e.path.find() [search]
      if item has a classlist
        return item that contains 'meal-info'
      else return false

      if we have a mealInfo
        get the mealID
        call getMealById(mealID)



IF WE WANT TO OUTPUT AS A STRING WHEN USING MAP, WE USE .join('');

